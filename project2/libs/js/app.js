let staticResults,searchDept,searchLoc,newEmployee={firstName:"",lastName:"",department:"Choose Department",departmentID:"reset",location:"Choose Location",locationID:"reset",email:"",id:"not assigned"},results=[],searchResults=[],locations=[],departments=[],departmentOptions=[],validateString="",locationForEditedDepartment=0;$(window).on("load",function(){initialiseData(),$("#preloader").length&&$("#preloader").delay(1e3).fadeOut("slow",function(){$("#preloader").remove()})});const initialiseData=()=>{callApi("getAll","GET",displayStaffData),callApi("getAllDepartments","GET",getDepartmentData),callApi("getAllLocations","GET",getLocationData)},displayStaffData=e=>{e.data?(staticResults=e.data,results=e.data):results=e,$("#firstRow").html(""),results.forEach(e=>{$("#firstRow").append(`<tr key=${e.id}>\n    <td class="bigger">\n             <p id="nameData"><strong>${e.firstName} ${e.lastName.toUpperCase()}</strong></p>\n    </td>\n    <td class="bigger">\n             <p id="departmentData">${e.department}</p>\n    </td>\n    <td class="bigger">\n             <p id="locationData">${e.location}</p>\n    </td>\n    <td class="smaller">         \n         <div class="buttons">\n         <button class="btn btn-secondary" type="button" id="view${e.id}"><i class="far fa-eye"></i></button>\n         <button class="btn btn-outline-dark" type="button" id="edit${e.id}"><i class="far fa-edit"></i></button>\n         <button class="btn btn-primary" type="button" id="delete${e.id}" ><i class="far fa-trash-alt"></i></button>\n        </div>  \n    </td>\n     </tr>`),$("#firstRow").on("click",`#view${e.id}`,function(){$(".viewEmployee").show(viewStaff(e.id))}),$("#firstRow").on("click",`#edit${e.id}`,function(){callApi("getAllLocations","GET",getLocationData);let t=e.id;$(".addEditForm").show(callApi("getPersonnelByID","GET",editStaff,t))}),$("#firstRow").on("click",`#delete${e.id}`,function(){$(".viewEmployee").show(deleteStaff(e.id))})})},getDepartmentData=e=>{departments=e.data,$("#selectDept").html('<option value="reset" selected>Search department</option>'),departments.forEach(e=>{$("#selectDept").append(`<option value="${e.id}">${e.name}</option>`)})},getLocationData=e=>{locations=e.data,$("#selectLoc").html('<option value="reset" selected>Search location</option>'),locations.forEach(e=>{$("#selectLoc").append(`<option value="${e.name}">${e.name}</option>`)})},callApi=(e,t,a,n,o,l,i,s)=>{$("#validation-text").html("");const r=`libs/php/${e}.php`;$.ajax({url:r,type:t,dataType:"json",data:{param1:n,param2:o,param3:l,param4:i,param5:s},crossOrigin:"",success:function(e){a(e)},error:function(e,t,a){console.log(`${r}: ajax call failed ${t}. ${a}. ${e}`)}})};$(".close").click(function(e){closeModal()});const closeModal=()=>{$("#validation-text").html(""),$(".modal").modal("hide"),$(".addEditForm").hide(),$(".viewEmployee").hide(),$(".newDepartmentForm").hide(),$(".newLocationForm").hide()};$("#hidingAddButton").click(function(){$(".addButtons").toggle()}),$("#hidingSearchButton").click(function(){$(".thead-light").toggle(),$("#resetHidingButton").toggle()});const viewStaff=e=>{let t=staticResults.filter(t=>t.id===e);$("#wholeName").html(`<strong>${t[0].firstName} ${t[0].lastName}</strong>`),$("#viewDepartment").html(`${t[0].department} department`),$("#viewLocation").html(`The ${t[0].location} office`),$("#emailFont").html(`${t[0].email}`),$("#extraInfo").modal("show")},editStaff=e=>{let t=e.data.personnel;departments=e.data.department,buildForm(t,"Edit"),$("#forename").val(t.firstName),$("#surname").val(t.lastName),$("#modalSelectDept").val(t.departmentID),$("#email").val(t.email),newEmployee.id=t.id;let a=locations.find(e=>e.name===t.locationName);t.locationID=a.id,$("#modalSelectLoc").val(t.locationID),$("#extraInfo").modal("show")},deleteStaff=e=>{viewStaff(e),$("#validation-text").html('<div class="alert alert-warning">\n  <strong>Are you sure you want to delete this employee?</strong><br>\n  <button class="btn btn-primary" id="confirmDelete">Yes</button>\n  <button class="btn btn-outline-dark close">No</button>'),$(".close").on("click",function(){closeModal()}),$("#confirmDelete").on("click",function(){resetData(),callApi("deletePersonnelByID","GET",deleteConfirmation,e)})},deleteConfirmation=e=>{closeModal(),initialiseData(),$("#extraInfo").modal("show"),$("#validation-text").html(`<div class="alert alert-info">\n    <strong>${e.data}</strong><br>`)};$("#addStaff").click(function(e){e.preventDefault(),$("#forename").val(" "),$("#surname").val(" "),$("#modalSelectLoc").val("reset"),$("#modalSelectDept").val("reset"),$("#email").val(" "),newEmployee.id="not assigned",buildForm(newEmployee,"Add"),$(".addEditForm").show(),$("#extraInfo").modal("show")});const buildForm=(e,t)=>{$("#verb").html(t),$("#modalSelectLoc").html('<option value="reset" selected>Choose location</option>'),locations.forEach(e=>{$("#modalSelectLoc").append(`<option value="${e.id}">${e.name}</option>`)}),$("#modalSelectDept").html('<option value="reset" selected>Choose department</option>'),departments.forEach(e=>{$("#modalSelectDept").append(`<option value="${e.id}">${e.name}</option>`)}),$("#modalSelectDept").change(function(e){let t=e.currentTarget.value;if("reset"!==t&&"resetSubset"!==t){let e=departments.find(e=>e.id===t);$("#modalSelectLoc").val(e.locationID)}else"reset"===t&&$("#modalSelectLoc").val("reset")}),$("#modalSelectLoc").change(function(e){let t=e.currentTarget.value;"reset"===t?departments.forEach(e=>{$("#modalSelectDept").append(`<option value="${e.id}">${e.name}</option>`)}):(departmentOptions=departments.filter(e=>e.locationID===t),$("#modalSelectDept").html(""),departmentOptions.length>1&&$("#modalSelectDept").append('<option value="resetSubset">Choose department</option>'),departmentOptions.forEach(e=>{$("#modalSelectDept").append(`<option value="${e.id}">${e.name}</option>`)}))})};$("#addDept").click(function(e){e.preventDefault(),changingDepartmentData()}),$("#addNewDepartment").on("click",function(){let e=$("#newDepartment").val().toLowerCase().replace(/(\b[a-z](?!\s))/g,function(e){return e.toUpperCase()});validateField("new department",e,2,20,lastDepartmentCheck)});const lastDepartmentCheck=e=>{let t=$("#selectDeptLocation").val();if("reset"===t)validationWarning(validateString="The new department must be associated with a location");else if(departments.find(t=>t.name===e))validationWarning(validateString=`${e} already exists within Company Directory. Duplicates are not allowed.`);else{let a=locations.find(e=>e.id===t).name;callApi("insertDepartment","GET",getNewDeptConfirmation,e,t,a)}};$("#addLoc").click(function(e){e.preventDefault(),changingLocationData()});const changingLocationData=()=>{callApi("getAllLocations","GET",getLocationData),$("#newLocation").val(""),$("#listLocations").html(""),locations.forEach(e=>{$("#listLocations").append(`<div class="locationFlex" key=${e.id}><p>${e.name}</p>\n       <div class="buttons">\n       <button class="btn btn-outline-dark" type="button" id="edit${e.id}"><i class="far fa-edit"></i></button>\n       <button class="btn btn-primary" type="button" id="delete${e.id}" ><i class="far fa-trash-alt"></i></button>\n     </div> `),$("#listLocations").on("click",`#edit${e.id}`,function(){callApi("getLocationById","GET",editLocationForm,e.id)}),$("#listLocations").on("click",`#delete${e.id}`,function(){$("#validation-text").html(`<div class="alert alert-warning">\n      <strong>Are you sure you want to delete the ${e.name} office?</strong><br>\n      <button class="btn btn-primary" id="confirmLocDelete">Yes</button>\n      <button class="btn btn-outline-dark close">No</button>`),$(".close").on("click",function(){$("#validation-text").html("")}),$("#confirmLocDelete").on("click",function(){callApi("deleteLocationById","GET",deleteConfirmation,e.id)})})}),$(".newLocationForm").show(),$("#extraInfo").modal("show")},editLocationForm=e=>{let t=e.data;$("#validation-text").html(`<div class="alert alert-warning">\n<label for="newLocationName" class="form-control-label">New name for <strong>${t.name} </strong>office</label>\n<input type="text" id="newLocationName" class="form-control" autocapitalize>\n<button class="btn btn-primary" id="confirmEdit" data=${t.id}>Save</button>\n<button class="btn btn-outline-dark close">Cancel</button>`),$(".close").on("click",function(){$("#validation-text").html("")}),$("#confirmEdit").on("click",function(){$("#modalSelectLoc").html('<option value="reset" selected>Choose location</option>'),locations.forEach(e=>{$("#modalSelectLoc").append(`<option value="${e.id}">${e.name}</option>`)});let e=$("#newLocationName").val().toLowerCase().replace(/(\b[a-z](?!\s))/g,function(e){return e.toUpperCase()});validateField("new location",e,2,20,lastUpdateLocationCheck,t.id)})},changingDepartmentData=()=>{callApi("getAllDepartments","GET",getDepartmentData),$("#newDepartment").val(""),$("#listDepartments").html(""),departments.forEach(e=>{$("#listDepartments").append(`<div class="departmentFlex" key=${e.id}><p>${e.name}</p>\n       <div class="buttons">\n       <button class="btn btn-outline-dark" type="button" id="edit${e.id}"><i class="far fa-edit"></i></button>\n       <button class="btn btn-primary" type="button" id="delete${e.id}" ><i class="far fa-trash-alt"></i></button>\n     </div> `),$("#listDepartments").on("click",`#delete${e.id}`,function(){$("#validation-text").html(`<div class="alert alert-warning">\n        <strong>Are you sure you want to delete the ${e.name} department?</strong><br>\n        <button class="btn btn-primary" id="confirmDeptDelete">Yes</button>\n        <button class="btn btn-outline-dark close">No</button>`),$(".close").on("click",function(){$("#validation-text").html("")}),$("#confirmDeptDelete").on("click",function(){callApi("deleteDepartmentById","GET",deleteConfirmation,e.id)})}),$("#listDepartments").on("click",`#edit${e.id}`,function(){callApi("getDepartmentById","GET",editDepartmentForm,e.id)})}),$("#selectDeptLocation").html('<option value="reset" selected>Choose location</option>'),locations.forEach(e=>{$("#selectDeptLocation").append(`<option value="${e.id}" loc-name="${e.name}">${e.name}</option>`)}),$(".newDepartmentForm").show(),$("#extraInfo").modal("show")},editDepartmentForm=e=>{let t=e.data;$("#validation-text").html(`<div class="alert alert-warning">\n<label for="newDepartmentName" class="form-control-label"><strong>Edit department</strong></label>\n<input type="text" id="newDepartmentName" class="form-control" autocapitalize ><br>\n\n<label for="locationNew" class="form-control-label">Location</label> \n<select class="form-select" id="locationNew"><option value="reset">Choose Location</option></select><br>\n\n<button class="btn btn-primary" id="confirmEditDept" data=${t.id}>Save</button>\n<button class="btn btn-outline-dark close">Cancel</button>`),$("#locationNew").html('<option value="reset" selected>Choose location</option>'),locations.forEach(e=>{$("#locationNew").append(`<option value="${e.id}">${e.name}</option>`)}),$("#newDepartmentName").val(t.name),$("#locationNew").val(t.locationID),$(".close").on("click",function(){$("#validation-text").html("")}),$("#confirmEditDept").on("click",function(){locationForEditedDepartment=$("#locationNew").val();let e=$("#newDepartmentName").val().toLowerCase().replace(/(\b[a-z](?!\s))/g,function(e){return e.toUpperCase()});validateField("new department",e,2,30,callUpdateDepartment,t.id)})};$("#addNewLocation").on("click",function(){let e=$("#newLocation").val().toLowerCase().replace(/(\b[a-z](?!\s))/g,function(e){return e.toUpperCase()});validateField("new location",e,2,20,lastLocationCheck)});const lastLocationCheck=e=>{locations.find(t=>t.name===e)?validationWarning(validateString=`${e} already exists within Company Directory. Duplicates are not allowed.`):callApi("insertLocation","GET",getNewLocConfirmation,e)},lastUpdateLocationCheck=(e,t)=>{locations.find(t=>t.name===e)?validationWarning(validateString=`${e} already exists within Company Directory. Duplicates are not allowed.`):callApi("updateLocation","GET",getEditConfirmation,e,t)},callUpdateDepartment=(e,t)=>{callApi("updateDepartment","GET",getEditConfirmation,e,locationForEditedDepartment,t)},getNewLocConfirmation=e=>{initialiseData(),closeModal(),$("#validation-text").html(`<div class="alert alert-success"><strong>${e.data} has successfully been added to the Company Directory. <br>Please add departments for this location.</strong></div>`),$("#extraInfo").modal("show")},getNewDeptConfirmation=e=>{initialiseData(),closeModal(),$("#extraInfo").modal("show"),$("#validation-text").html(`<div class="alert alert-success"><strong>${e.data}</strong></div>`)};$("#searchNames").on("input",function(e){let t=e.currentTarget.value.toLowerCase(),a="reset"===$("#selectDept").val()&&"reset"===$("#selectLoc").val()?staticResults:searchResults;results=a.filter(e=>(e.wholeName=e.firstName.toLowerCase()+e.lastName.toLowerCase(),e.wholeName.includes(t))),displayStaffData(results)}),$("#selectDept").on("change",function(e){if("reset"===(searchDept=e.currentTarget.value));else{results=results.filter(e=>e.departmentID===searchDept),searchResults=results,displayStaffData(results)}}),$("#selectLoc").on("change",function(e){if("reset"===(searchLoc=e.currentTarget.value))resetData();else{results=results.filter(e=>e.location===searchLoc),searchResults=results,displayStaffData(results)}});const resetData=()=>{displayStaffData(staticResults),$("#searchNames").val(""),$("#selectDept").val("reset"),$("#selectLoc").val("reset"),newEmployee={firstName:"",lastName:"",department:"Choose Department",departmentID:"reset",location:"Choose Location",locationID:"reset",email:"",id:"not assigned"}};$("#refreshButton").click(function(){location.reload(!0)}),$("#resetButton").click(function(){resetData()}),$("#resetHidingButton").click(function(){resetData()}),$("#addOrEditStaff").click(function(){newEmployee.firstName=$("#forename").val().toLowerCase().replace(/(\b[a-z](?!\s))/g,function(e){return e.toUpperCase()}),validateField("employee's first name",newEmployee.firstName,2,15,lastNameCheck)});const lastNameCheck=e=>{newEmployee.lastName=$("#surname").val().toLowerCase().replace(/(\b[a-z](?!\s))/g,function(e){return e.toUpperCase()}),validateField("employee's last name",newEmployee.lastName,2,20,departmentCheck)},departmentCheck=()=>{newEmployee.departmentID=$("#modalSelectDept").val(),newEmployee.locationID=$("#modalSelectLoc").val(),"reset"===newEmployee.departmentID||"resetSubset"===newEmployee.departmentID||"reset"===newEmployee.locationID?validationWarning(validateString="The employee must be associated with a location and a department"):(newEmployee.email=$("#email").val().toLowerCase(),"not assigned"!==newEmployee.id?validateField("email",newEmployee.email,6,40,updatePersonnel):validateField("email",newEmployee.email,6,40,emailDuplicationCheck))},emailDuplicationCheck=()=>{staticResults.find(e=>e.email===newEmployee.email)?validationWarning(validateString="There is already an employee with this email address in the Company Directory. Duplicates are not allowed"):callApi("insertEmployee","POST",getAddConfirmation,newEmployee.firstName,newEmployee.lastName,newEmployee.email,newEmployee.departmentID)},updatePersonnel=()=>{callApi("updateEmployee","GET",getEditConfirmation,newEmployee.firstName,newEmployee.lastName,newEmployee.email,newEmployee.departmentID,newEmployee.id)},getAddConfirmation=e=>{closeModal(),initialiseData(),$("#validation-text").html(`<div class="alert alert-success">\n  <strong>${e.data[0]}</strong><br></div>`),$("#extraInfo").modal("show")},getEditConfirmation=e=>{closeModal(),initialiseData(),$("#validation-text").html(`<div class="alert alert-success">\n  <strong>${e.data[0]}'s information has successfully been updated</strong><br></div>`),$("#extraInfo").modal("show")},validationWarning=e=>{$("#validation-text").html(""),$("#validation-text").html(`<div class="alert alert-danger">\n      <strong><p>Error!</p></strong> ${e} \n    </div>`)},validateField=(e,t,a,n,o,l)=>{t.length>n||t.length<a?validationWarning(validateString=`The ${e} must be between ${a} and ${n} characters.`):validatePattern(e,t,o,l)},validatePattern=(e,t,a,n)=>{"email"===e?t.match(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/)?a(t):validationWarning(validateString=`${t} does not seem to be a regularly formatted email address.`):t.match(/^[A-Za-z -]+$/)?a(t,n):validationWarning(validateString=`The ${e} must not contain any unusual characters.`)};